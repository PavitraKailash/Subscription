# Generated by Django 3.2.7 on 2021-09-18 19:32

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='employee',
            fields=[
                ('user_id', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('emp_first_name', models.CharField(max_length=30)),
                ('emp_last_name', models.CharField(max_length=30)),
                ('emp_id', models.CharField(db_index=True, max_length=15, null=True)),
                ('emp_email', models.CharField(db_index=True, max_length=250, null=True, unique=True)),
                ('emp_phone', models.CharField(db_index=True, max_length=15, null=True, unique=True)),
                ('emp_lastupdated', models.DateTimeField(auto_now=True)),
                ('emp_lastupdatedby', models.CharField(max_length=15, null=True)),
                ('is_user', models.BooleanField(default=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='loginUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(max_length=100, null=True)),
                ('pwd_reset_date', models.DateTimeField(null=True)),
                ('last_login', models.DateTimeField(null=True)),
                ('user_id', models.CharField(max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'login_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='employee',
            constraint=models.UniqueConstraint(fields=('emp_email', 'emp_phone'), name='unique_email_phone'),
        ),
    ]
